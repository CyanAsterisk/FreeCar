// Code generated by hertz generator.

package user

import (
	"context"

	huser "github.com/CyanAsterisk/FreeCar/server/cmd/api/biz/model/user"
	"github.com/CyanAsterisk/FreeCar/server/cmd/api/config"
	"github.com/CyanAsterisk/FreeCar/server/shared/consts"
	"github.com/CyanAsterisk/FreeCar/server/shared/errno"
	kuser "github.com/CyanAsterisk/FreeCar/server/shared/kitex_gen/user"
	"github.com/CyanAsterisk/FreeCar/server/shared/tools"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/hlog"
)

// AdminLogin .
// @router /login/admin [POST]
func AdminLogin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req huser.AdminLoginRequest
	resp := new(kuser.AdminLoginResponse)
	defer errno.NewSendResponse(c, resp)

	err = c.BindAndValidate(&req)
	if err != nil {
		resp.BaseResp = tools.BuildBaseResp(errno.ParamsErr)
		return
	}
	resp, err = config.GlobalUserClient.AdminLogin(ctx, &kuser.AdminLoginRequest{
		Username: req.Username,
		Password: req.Password,
	})
	if err != nil {
		hlog.Error("rpc user service err", err)
		resp.BaseResp = tools.BuildBaseResp(errno.ServiceErr)
	}
}

// AdminChangePassword .
// @router /admin/user/password [POST]
func AdminChangePassword(ctx context.Context, c *app.RequestContext) {
	var err error
	var req huser.AdminChangePasswordRequest
	resp := new(kuser.ChangeAdminPasswordResponse)
	defer errno.NewSendResponse(c, resp)

	err = c.BindAndValidate(&req)
	if err != nil {
		resp.BaseResp = tools.BuildBaseResp(errno.ParamsErr)
		return
	}
	resp, err = config.GlobalUserClient.ChangeAdminPassword(ctx, &kuser.ChangeAdminPasswordRequest{
		AccountId:    c.MustGet(consts.AccountID).(int64),
		OldPassword:  req.OldPassword,
		NewPassword_: req.NewPassword,
	})
	if err != nil {
		hlog.Error("rpc user service err", err)
		resp.BaseResp = tools.BuildBaseResp(errno.ServiceErr)
	}
}

// AdminAddUser .
// @router /admin/user/user [POST]
func AdminAddUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req huser.AddUserRequest
	resp := new(kuser.AddUserResponse)
	defer errno.NewSendResponse(c, resp)

	err = c.BindAndValidate(&req)
	if err != nil {
		resp.BaseResp = tools.BuildBaseResp(errno.ParamsErr)
		return
	}

	resp, err = config.GlobalUserClient.AddUser(ctx, &kuser.AddUserRequest{
		AccountId:    req.AccountID,
		Username:     req.Username,
		PhoneNumber:  req.PhoneNumber,
		AvatarBlobId: req.AvatarBlobID,
		OpenId:       req.OpenID,
	})
	if err != nil {
		hlog.Error("rpc user service err", err)
		resp.BaseResp = tools.BuildBaseResp(errno.ServiceErr)
	}
}

// AdminDeleteUser .
// @router /admin/user/user [DELETE]
func AdminDeleteUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req huser.DeleteUserRequest
	resp := new(kuser.DeleteUserResponse)
	defer errno.NewSendResponse(c, resp)

	err = c.BindAndValidate(&req)
	if err != nil {
		resp.BaseResp = tools.BuildBaseResp(errno.ParamsErr)
		return
	}
	resp, err = config.GlobalUserClient.DeleteUser(ctx, &kuser.DeleteUserRequest{AccountId: req.AccountID})
	if err != nil {
		hlog.Error("rpc user service err", err)
		resp.BaseResp = tools.BuildBaseResp(errno.ServiceErr)
	}
}

// AdminUpdateUser .
// @router /admin/user/user [POST]
func AdminUpdateUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req huser.UpdateUserRequest
	resp := new(kuser.UpdateUserResponse)
	defer errno.NewSendResponse(c, resp)

	err = c.BindAndValidate(&req)
	if err != nil {
		resp.BaseResp = tools.BuildBaseResp(errno.ParamsErr)
		return
	}
	resp, err = config.GlobalUserClient.UpdateUser(ctx, &kuser.UpdateUserRequest{
		AccountId:   req.AccountID,
		Username:    req.Username,
		PhoneNumber: req.PhoneNumber,
		AvatarUrl:   req.AvatarURL,
	})
	if err != nil {
		hlog.Error("rpc user service err", err)
		resp.BaseResp = tools.BuildBaseResp(errno.ServiceErr)
	}
}

// AdminGetSomeUsers .
// @router /admin/user/some [GET]
func AdminGetSomeUsers(ctx context.Context, c *app.RequestContext) {
	var err error
	var req huser.GetSomeUsersRequest
	resp := new(kuser.GetSomeUsersResponse)
	defer errno.NewSendResponse(c, resp)

	err = c.BindAndValidate(&req)
	if err != nil {
		resp.BaseResp = tools.BuildBaseResp(errno.ParamsErr)
		return
	}
	resp, err = config.GlobalUserClient.GetSomeUsers(ctx, &kuser.GetSomeUsersRequest{})
	if err != nil {
		hlog.Error("rpc user service err", err)
		resp.BaseResp = tools.BuildBaseResp(errno.ServiceErr)
	}
}

// AdminGetAllUsers .
// @router /admin/user/all [GET]
func AdminGetAllUsers(ctx context.Context, c *app.RequestContext) {
	var err error
	var req huser.GetAllUsersRequest
	resp := new(kuser.GetAllUsersResponse)
	defer errno.NewSendResponse(c, resp)

	err = c.BindAndValidate(&req)
	if err != nil {
		resp.BaseResp = tools.BuildBaseResp(errno.ParamsErr)
		return
	}

	resp, err = config.GlobalUserClient.GetAllUsers(ctx, &kuser.GetAllUsersRequest{})
	if err != nil {
		hlog.Error("rpc user service err", err)
		resp.BaseResp = tools.BuildBaseResp(errno.ServiceErr)
	}
}

// Login .
// @router /login/user [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	var err error
	var req huser.LoginRequest
	resp := new(kuser.LoginResponse)
	defer errno.NewSendResponse(c, resp)

	err = c.BindAndValidate(&req)
	if err != nil {
		resp.BaseResp = tools.BuildBaseResp(errno.ParamsErr)
		return
	}
	resp, err = config.GlobalUserClient.Login(ctx, &kuser.LoginRequest{Code: req.Code})
	if err != nil {
		hlog.Error("rpc user service err", err)
		resp.BaseResp = tools.BuildBaseResp(errno.ServiceErr)
	}
}

// UploadAvatar .
// @router /mini/user/avatar [POST]
func UploadAvatar(ctx context.Context, c *app.RequestContext) {
	var err error
	var req huser.UploadAvatarRequest
	resp := new(kuser.UploadAvatarResponse)
	defer errno.NewSendResponse(c, resp)

	err = c.BindAndValidate(&req)
	if err != nil {
		resp.BaseResp = tools.BuildBaseResp(errno.ParamsErr)
		return
	}

	resp, err = config.GlobalUserClient.UploadAvatar(ctx, &kuser.UploadAvatarRequset{AccountId: c.MustGet(consts.AccountID).(int64)})
	if err != nil {
		hlog.Error("rpc user service err", err)
		resp.BaseResp = tools.BuildBaseResp(errno.ServiceErr)
	}
}

// GetUserInfo .
// @router /mini/user/info [GET]
func GetUserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req huser.GetUserInfoRequest
	resp := new(kuser.GetUserInfoResponse)
	defer errno.NewSendResponse(c, resp)

	err = c.BindAndValidate(&req)
	if err != nil {
		resp.BaseResp = tools.BuildBaseResp(errno.ParamsErr)
		return
	}

	resp, err = config.GlobalUserClient.GetUser(ctx, &kuser.GetUserRequest{AccontId: c.MustGet(consts.AccountID).(int64)})
	if err != nil {
		hlog.Error("rpc user service err", err)
		resp.BaseResp = tools.BuildBaseResp(errno.ServiceErr)
	}
}
