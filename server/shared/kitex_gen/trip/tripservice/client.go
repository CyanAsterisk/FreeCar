// Code generated by Kitex v0.4.4. DO NOT EDIT.

package tripservice

import (
	"context"
	trip "github.com/CyanAsterisk/FreeCar/server/shared/kitex_gen/trip"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CreateTrip(ctx context.Context, req *trip.CreateTripRequest, callOptions ...callopt.Option) (r *trip.CreateTripResponse, err error)
	GetTrip(ctx context.Context, req *trip.GetTripRequest, callOptions ...callopt.Option) (r *trip.GetTripResponse, err error)
	GetTrips(ctx context.Context, req *trip.GetTripsRequest, callOptions ...callopt.Option) (r *trip.GetTripsResponse, err error)
	UpdateTrip(ctx context.Context, req *trip.UpdateTripRequest, callOptions ...callopt.Option) (r *trip.UpdateTripResponse, err error)
	GetAllTrips(ctx context.Context, req *trip.GetAllTripsRequest, callOptions ...callopt.Option) (r *trip.GetAllTripsResponse, err error)
	GetSomeTrips(ctx context.Context, req *trip.GetSomeTripsRequest, callOptions ...callopt.Option) (r *trip.GetSomeTripsResponse, err error)
	EditTrip(ctx context.Context, req *trip.EditTripRequest, callOptions ...callopt.Option) (r *trip.EditTripResponse, err error)
	DeleteTrip(ctx context.Context, req *trip.DeleteTripRequest, callOptions ...callopt.Option) (r *trip.DeleteTripResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kTripServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kTripServiceClient struct {
	*kClient
}

func (p *kTripServiceClient) CreateTrip(ctx context.Context, req *trip.CreateTripRequest, callOptions ...callopt.Option) (r *trip.CreateTripResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateTrip(ctx, req)
}

func (p *kTripServiceClient) GetTrip(ctx context.Context, req *trip.GetTripRequest, callOptions ...callopt.Option) (r *trip.GetTripResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetTrip(ctx, req)
}

func (p *kTripServiceClient) GetTrips(ctx context.Context, req *trip.GetTripsRequest, callOptions ...callopt.Option) (r *trip.GetTripsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetTrips(ctx, req)
}

func (p *kTripServiceClient) UpdateTrip(ctx context.Context, req *trip.UpdateTripRequest, callOptions ...callopt.Option) (r *trip.UpdateTripResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateTrip(ctx, req)
}

func (p *kTripServiceClient) GetAllTrips(ctx context.Context, req *trip.GetAllTripsRequest, callOptions ...callopt.Option) (r *trip.GetAllTripsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetAllTrips(ctx, req)
}

func (p *kTripServiceClient) GetSomeTrips(ctx context.Context, req *trip.GetSomeTripsRequest, callOptions ...callopt.Option) (r *trip.GetSomeTripsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetSomeTrips(ctx, req)
}

func (p *kTripServiceClient) EditTrip(ctx context.Context, req *trip.EditTripRequest, callOptions ...callopt.Option) (r *trip.EditTripResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.EditTrip(ctx, req)
}

func (p *kTripServiceClient) DeleteTrip(ctx context.Context, req *trip.DeleteTripRequest, callOptions ...callopt.Option) (r *trip.DeleteTripResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteTrip(ctx, req)
}
