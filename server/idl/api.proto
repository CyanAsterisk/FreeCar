syntax = "proto3";

package api;

option go_package = "server/cmd/api";

import "hz.proto";

message LoginRequest {
  string code = 1[(api.vd) = "len($) > 0"];
}

message LoginResponse {
  string token = 1;
  int64 expired_at = 2[(api.body) = "expired_at"];
}

message ELoginResponse{
  int32 code = 1;
  LoginResponse data = 2;
  string message = 3;
}

message AdminLoginRequest {
  string code = 1[(api.vd) = "len($) > 0"];
}

message AdminLoginResponse {
  string token = 1;
  int64 expired_at = 2[(api.body) = "expired_at"];
}

message AdminELoginResponse{
  int32 code = 1;
  LoginResponse data = 2;
  string message = 3;
}

message UserInfo{
   int64 account_id = 1;
   string username = 2;
   int64 phone_number = 3;
   string avatar_url = 4;
}

message EUserInfo{
  int32 code = 1;
  UserInfo data = 2;
  string message = 3;
}

message GetUserInfoRequest{}

message UpdateUserRequest{
    string username = 1;
    int64 phone_number = 2;
}

message UpdateUserResponse{
}

message EUpdateUserResponse{
  int32 code = 1;
  UpdateUserResponse data = 2;
  string message = 3;
}
message UploadAvatarRequest{}

message UploadAvatarResponse{
  string upload_url = 1;
}

message EUploadAvatarResponse{
  int32 code = 1;
  UploadAvatarResponse data = 2;
  string message = 3;
}

message CarEntity {
  string id = 1;
  Car car = 2;
}

message ECarEntity{
  int32 code = 1;
  CarEntity data = 2;
  string message = 3;
}

enum CarStatus {
  CS_NOT_SPECIFIED = 0;
  LOCKED = 1;
  UNLOCKING = 2;
  UNLOCKED = 3;
  LOCKING = 4;
}

message Driver {
  string id = 1;
  string avatar_url = 2[(api.body) = "avatar_url"];
}

message Location {
  double latitude = 1;
  double longitude = 2;
}

message Car {
  CarStatus status = 1;
  Driver driver = 2;
  Location position = 3;
  string trip_id = 4[(api.body) = "trip_id"];
  float power = 5;
  string plate_num = 6[(api.body) = "plate_num"];
}
message ECar{
  int32 code = 1;
  Car data = 2;
  string message = 3;
}

message CreateCarRequest {
  string plate_num = 6[(api.body) = "plate_num"];
}

message GetCarRequest {
  string id = 1[(api.vd) = "len($) > 0"];
}

message GetCarsRequest{
}

message GetCarsResponse{
  repeated CarEntity cars = 1;
}

message EGetCarsResponse{
  int32 code = 1;
  GetCarsResponse data = 2;
  string message = 3;
}

message LocationStatus{
  Location location = 1;
  int32 fee_cent = 2[(api.body) = "fee_cent"];
  double km_driven = 3[(api.body) = "km_driver"];
  string poi_name = 4[(api.body) = "poi_name"];
  int64 timestamp_sec = 5[(api.body) = "timestamp_sec"];
}

enum TripStatus {
  TS_NOT_SPECIFIED = 0;
  IN_PROGRESS = 1;
  FINISHED = 2;
}

message TripEntity{
  string id = 1;
  Trip trip = 2;
}

message ETripEntity{
  int32 code = 1;
  TripEntity data = 2;
  string message = 3;
}

message Trip{
  int64 account_id = 1[(api.body) = "account_id"];
  string car_id = 2[(api.body) = "car_id"];
  LocationStatus start = 3;
  LocationStatus current = 4;
  LocationStatus end = 5;
  TripStatus status = 6;
  string identity_id = 7[(api.body) = "identity_id"];
}

message ETrip{
  int32 code = 1;
  Trip data = 2;
  string message = 3;
}

message CreateTripRequest {
  Location start = 1;
  string car_id = 2[(api.body) = "car_id"];
  string avatar_url = 3[(api.body) = "avatar_url"];
}


message GetTripRequest{
  string id = 1[(api.vd) = "len($) > 0"];
}


message GetTripsRequest{
  TripStatus status = 1;
}

message GetTripsResponse{
  repeated TripEntity trips = 1;
}


message EGetTripsResponse{
  int32 code = 1;
  GetTripsResponse data = 2;
  string message = 3;
}

message UpdateTripRequest{
  string id = 1;
  Location current = 2;
  bool end_trip = 3[(api.body) = "end_trip"];
}

enum Gender {
  G_NOT_SPECIFIED = 0;
  MALE = 1;
  FEMALE = 2;
}

enum IdentityStatus {
  UNSUBMITTED = 0;
  PENDING = 1;
  VERIFIED = 2;
}

message Profile {
  Identity identity = 1;
  IdentityStatus identity_status = 2[(api.body) = "identity_status"];
}

message EProfile{
  int32 code = 1;
  Profile data = 2;
  string message = 3;
}

message Identity {
  string lic_number = 1[(api.body) = "lic_number"];
  string name = 2;
  Gender gender = 3;
  int64 birth_date_millis = 4[(api.body) = "birth_date_millis"];
}

message EIdentity {
  int32 code = 1;
  Identity data = 2;
  string message = 3;
}

message GetProfileRequest {}


message SubmitProfileRequest {
  Identity identity = 2;
}

message ClearProfileRequest {}

message GetProfilePhotoRequest {}

message GetProfilePhotoResponse {
  string url = 1;
}

message EGetProfilePhotoResponse {
  int32 code = 1;
  GetProfilePhotoResponse data = 2;
  string message = 3;
}


message CreateProfilePhotoRequest {}

message CreateProfilePhotoResponse {
  string upload_url = 1[(api.body) = "upload_url"];
}

message ECreateProfilePhotoResponse {
  int32 code = 1;
  CreateProfilePhotoResponse data = 2;
  string message = 3;
}

message CompleteProfilePhotoRequest {}

message ClearProfilePhotoRequest {}

message ClearProfilePhotoResponse {}

message EClearProfilePhotoResponse {
  int32 code = 1;
  ClearProfilePhotoResponse data = 2;
  string message = 3;
}

service apiService {
  rpc Login (LoginRequest) returns (LoginResponse) {option (api.post) = "/auth/login";}
  rpc GetUserInfo (GetUserInfoRequest) returns (UserInfo) {option (api.get) = "/auth/info";}
  rpc UpdateUserInfo (UpdateUserRequest) returns (UpdateUserResponse)  {option (api.post) = "/auth/info";}
  rpc UploadAvatar (UploadAvatarRequest) returns (UploadAvatarResponse) {option (api.post) = "/auth/avatar";}

  rpc CreateCar (CreateCarRequest) returns (CarEntity) {option (api.post) = "/car";}
  rpc GetCar (GetCarRequest) returns (Car) {option (api.get) = "/car";}
  rpc GetCars (GetCarsRequest) returns (GetCarsRequest) {option (api.get) = "/cars";}

  rpc GetProfile (GetProfileRequest) returns (Profile) {option (api.get) = "/profile";}
  rpc SubmitProfile (SubmitProfileRequest) returns (Profile) {option (api.post) = "/profile";}
  rpc ClearProfile (ClearProfileRequest) returns (Profile) {option (api.delete) = "/profile";}

  rpc GetProfilePhoto (GetProfilePhotoRequest) returns (GetProfilePhotoResponse) {option (api.get) = "/profile/photo";}
  rpc CreateProfilePhoto (CreateProfilePhotoRequest) returns (CreateProfilePhotoResponse) {option (api.post) = "/profile/photo";}
  rpc CompleteProfilePhoto (CompleteProfilePhotoRequest) returns (Identity) {option (api.post) = "/profile/photo/complete";}
  rpc ClearProfilePhoto (ClearProfilePhotoRequest) returns (ClearProfilePhotoResponse) {option (api.delete) = "/profile/photo";}

  rpc CreateTrip (CreateTripRequest) returns (TripEntity) {option (api.post) = "/trip";}
  rpc GetTrip(GetTripRequest) returns (Trip) {option (api.get) = "/trip/:id";}
  rpc GetTrips (GetTripsRequest) returns (GetTripsResponse) {option (api.get) = "/trips";}
  rpc UpdateTrip (UpdateTripRequest) returns (Trip) {option (api.put) = "/trip/:id";}
}