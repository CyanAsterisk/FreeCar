// Code generated by Kitex v0.4.4. DO NOT EDIT.

package tripservice

import (
	"context"
	trip "github.com/CyanAsterisk/FreeCar/server/shared/kitex_gen/trip"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return tripServiceServiceInfo
}

var tripServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "TripService"
	handlerType := (*trip.TripService)(nil)
	methods := map[string]kitex.MethodInfo{
		"CreateTrip":   kitex.NewMethodInfo(createTripHandler, newTripServiceCreateTripArgs, newTripServiceCreateTripResult, false),
		"GetTrip":      kitex.NewMethodInfo(getTripHandler, newTripServiceGetTripArgs, newTripServiceGetTripResult, false),
		"GetTrips":     kitex.NewMethodInfo(getTripsHandler, newTripServiceGetTripsArgs, newTripServiceGetTripsResult, false),
		"UpdateTrip":   kitex.NewMethodInfo(updateTripHandler, newTripServiceUpdateTripArgs, newTripServiceUpdateTripResult, false),
		"GetAllTrips":  kitex.NewMethodInfo(getAllTripsHandler, newTripServiceGetAllTripsArgs, newTripServiceGetAllTripsResult, false),
		"GetSomeTrips": kitex.NewMethodInfo(getSomeTripsHandler, newTripServiceGetSomeTripsArgs, newTripServiceGetSomeTripsResult, false),
		"EditTrip":     kitex.NewMethodInfo(editTripHandler, newTripServiceEditTripArgs, newTripServiceEditTripResult, false),
		"DeleteTrip":   kitex.NewMethodInfo(deleteTripHandler, newTripServiceDeleteTripArgs, newTripServiceDeleteTripResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "trip",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func createTripHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*trip.TripServiceCreateTripArgs)
	realResult := result.(*trip.TripServiceCreateTripResult)
	success, err := handler.(trip.TripService).CreateTrip(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTripServiceCreateTripArgs() interface{} {
	return trip.NewTripServiceCreateTripArgs()
}

func newTripServiceCreateTripResult() interface{} {
	return trip.NewTripServiceCreateTripResult()
}

func getTripHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*trip.TripServiceGetTripArgs)
	realResult := result.(*trip.TripServiceGetTripResult)
	success, err := handler.(trip.TripService).GetTrip(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTripServiceGetTripArgs() interface{} {
	return trip.NewTripServiceGetTripArgs()
}

func newTripServiceGetTripResult() interface{} {
	return trip.NewTripServiceGetTripResult()
}

func getTripsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*trip.TripServiceGetTripsArgs)
	realResult := result.(*trip.TripServiceGetTripsResult)
	success, err := handler.(trip.TripService).GetTrips(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTripServiceGetTripsArgs() interface{} {
	return trip.NewTripServiceGetTripsArgs()
}

func newTripServiceGetTripsResult() interface{} {
	return trip.NewTripServiceGetTripsResult()
}

func updateTripHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*trip.TripServiceUpdateTripArgs)
	realResult := result.(*trip.TripServiceUpdateTripResult)
	success, err := handler.(trip.TripService).UpdateTrip(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTripServiceUpdateTripArgs() interface{} {
	return trip.NewTripServiceUpdateTripArgs()
}

func newTripServiceUpdateTripResult() interface{} {
	return trip.NewTripServiceUpdateTripResult()
}

func getAllTripsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*trip.TripServiceGetAllTripsArgs)
	realResult := result.(*trip.TripServiceGetAllTripsResult)
	success, err := handler.(trip.TripService).GetAllTrips(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTripServiceGetAllTripsArgs() interface{} {
	return trip.NewTripServiceGetAllTripsArgs()
}

func newTripServiceGetAllTripsResult() interface{} {
	return trip.NewTripServiceGetAllTripsResult()
}

func getSomeTripsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*trip.TripServiceGetSomeTripsArgs)
	realResult := result.(*trip.TripServiceGetSomeTripsResult)
	success, err := handler.(trip.TripService).GetSomeTrips(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTripServiceGetSomeTripsArgs() interface{} {
	return trip.NewTripServiceGetSomeTripsArgs()
}

func newTripServiceGetSomeTripsResult() interface{} {
	return trip.NewTripServiceGetSomeTripsResult()
}

func editTripHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*trip.TripServiceEditTripArgs)
	realResult := result.(*trip.TripServiceEditTripResult)
	success, err := handler.(trip.TripService).EditTrip(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTripServiceEditTripArgs() interface{} {
	return trip.NewTripServiceEditTripArgs()
}

func newTripServiceEditTripResult() interface{} {
	return trip.NewTripServiceEditTripResult()
}

func deleteTripHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*trip.TripServiceDeleteTripArgs)
	realResult := result.(*trip.TripServiceDeleteTripResult)
	success, err := handler.(trip.TripService).DeleteTrip(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTripServiceDeleteTripArgs() interface{} {
	return trip.NewTripServiceDeleteTripArgs()
}

func newTripServiceDeleteTripResult() interface{} {
	return trip.NewTripServiceDeleteTripResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateTrip(ctx context.Context, req *trip.CreateTripRequest) (r *trip.CreateTripResponse, err error) {
	var _args trip.TripServiceCreateTripArgs
	_args.Req = req
	var _result trip.TripServiceCreateTripResult
	if err = p.c.Call(ctx, "CreateTrip", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetTrip(ctx context.Context, req *trip.GetTripRequest) (r *trip.GetTripResponse, err error) {
	var _args trip.TripServiceGetTripArgs
	_args.Req = req
	var _result trip.TripServiceGetTripResult
	if err = p.c.Call(ctx, "GetTrip", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetTrips(ctx context.Context, req *trip.GetTripsRequest) (r *trip.GetTripsResponse, err error) {
	var _args trip.TripServiceGetTripsArgs
	_args.Req = req
	var _result trip.TripServiceGetTripsResult
	if err = p.c.Call(ctx, "GetTrips", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateTrip(ctx context.Context, req *trip.UpdateTripRequest) (r *trip.UpdateTripResponse, err error) {
	var _args trip.TripServiceUpdateTripArgs
	_args.Req = req
	var _result trip.TripServiceUpdateTripResult
	if err = p.c.Call(ctx, "UpdateTrip", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetAllTrips(ctx context.Context, req *trip.GetAllTripsRequest) (r *trip.GetAllTripsResponse, err error) {
	var _args trip.TripServiceGetAllTripsArgs
	_args.Req = req
	var _result trip.TripServiceGetAllTripsResult
	if err = p.c.Call(ctx, "GetAllTrips", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetSomeTrips(ctx context.Context, req *trip.GetSomeTripsRequest) (r *trip.GetSomeTripsResponse, err error) {
	var _args trip.TripServiceGetSomeTripsArgs
	_args.Req = req
	var _result trip.TripServiceGetSomeTripsResult
	if err = p.c.Call(ctx, "GetSomeTrips", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EditTrip(ctx context.Context, req *trip.EditTripRequest) (r *trip.EditTripResponse, err error) {
	var _args trip.TripServiceEditTripArgs
	_args.Req = req
	var _result trip.TripServiceEditTripResult
	if err = p.c.Call(ctx, "EditTrip", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteTrip(ctx context.Context, req *trip.DeleteTripRequest) (r *trip.DeleteTripResponse, err error) {
	var _args trip.TripServiceDeleteTripArgs
	_args.Req = req
	var _result trip.TripServiceDeleteTripResult
	if err = p.c.Call(ctx, "DeleteTrip", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
