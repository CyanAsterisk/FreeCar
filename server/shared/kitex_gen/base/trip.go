// Code generated by thriftgo (0.2.5). DO NOT EDIT.

package base

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type TripStatus int64

const (
	TripStatus_TS_NOT_SPECIFIED TripStatus = 0
	TripStatus_IN_PROGRESS      TripStatus = 1
	TripStatus_FINISHED         TripStatus = 2
)

func (p TripStatus) String() string {
	switch p {
	case TripStatus_TS_NOT_SPECIFIED:
		return "TS_NOT_SPECIFIED"
	case TripStatus_IN_PROGRESS:
		return "IN_PROGRESS"
	case TripStatus_FINISHED:
		return "FINISHED"
	}
	return "<UNSET>"
}

func TripStatusFromString(s string) (TripStatus, error) {
	switch s {
	case "TS_NOT_SPECIFIED":
		return TripStatus_TS_NOT_SPECIFIED, nil
	case "IN_PROGRESS":
		return TripStatus_IN_PROGRESS, nil
	case "FINISHED":
		return TripStatus_FINISHED, nil
	}
	return TripStatus(0), fmt.Errorf("not a valid TripStatus string")
}

func TripStatusPtr(v TripStatus) *TripStatus { return &v }
func (p *TripStatus) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TripStatus(result.Int64)
	return
}

func (p *TripStatus) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type Location struct {
	Latitude  float64 `thrift:"latitude,1" frugal:"1,default,double" json:"latitude"`
	Longitude float64 `thrift:"longitude,2" frugal:"2,default,double" json:"longitude"`
}

func NewLocation() *Location {
	return &Location{}
}

func (p *Location) InitDefault() {
	*p = Location{}
}

func (p *Location) GetLatitude() (v float64) {
	return p.Latitude
}

func (p *Location) GetLongitude() (v float64) {
	return p.Longitude
}
func (p *Location) SetLatitude(val float64) {
	p.Latitude = val
}
func (p *Location) SetLongitude(val float64) {
	p.Longitude = val
}

var fieldIDToName_Location = map[int16]string{
	1: "latitude",
	2: "longitude",
}

func (p *Location) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Location[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Location) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		p.Latitude = v
	}
	return nil
}

func (p *Location) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		p.Longitude = v
	}
	return nil
}

func (p *Location) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Location"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Location) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("latitude", thrift.DOUBLE, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.Latitude); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Location) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("longitude", thrift.DOUBLE, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.Longitude); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Location) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Location(%+v)", *p)
}

func (p *Location) DeepEqual(ano *Location) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Latitude) {
		return false
	}
	if !p.Field2DeepEqual(ano.Longitude) {
		return false
	}
	return true
}

func (p *Location) Field1DeepEqual(src float64) bool {

	if p.Latitude != src {
		return false
	}
	return true
}
func (p *Location) Field2DeepEqual(src float64) bool {

	if p.Longitude != src {
		return false
	}
	return true
}

type LocationStatus struct {
	Location     *Location `thrift:"location,1" frugal:"1,default,Location" json:"location"`
	FeeCent      int32     `thrift:"fee_cent,2" frugal:"2,default,i32" json:"fee_cent"`
	KmDriven     float64   `thrift:"km_driven,3" frugal:"3,default,double" json:"km_driven"`
	PoiName      string    `thrift:"poi_name,4" frugal:"4,default,string" json:"poi_name"`
	TimestampSec int64     `thrift:"timestamp_sec,5" frugal:"5,default,i64" json:"timestamp_sec"`
}

func NewLocationStatus() *LocationStatus {
	return &LocationStatus{}
}

func (p *LocationStatus) InitDefault() {
	*p = LocationStatus{}
}

var LocationStatus_Location_DEFAULT *Location

func (p *LocationStatus) GetLocation() (v *Location) {
	if !p.IsSetLocation() {
		return LocationStatus_Location_DEFAULT
	}
	return p.Location
}

func (p *LocationStatus) GetFeeCent() (v int32) {
	return p.FeeCent
}

func (p *LocationStatus) GetKmDriven() (v float64) {
	return p.KmDriven
}

func (p *LocationStatus) GetPoiName() (v string) {
	return p.PoiName
}

func (p *LocationStatus) GetTimestampSec() (v int64) {
	return p.TimestampSec
}
func (p *LocationStatus) SetLocation(val *Location) {
	p.Location = val
}
func (p *LocationStatus) SetFeeCent(val int32) {
	p.FeeCent = val
}
func (p *LocationStatus) SetKmDriven(val float64) {
	p.KmDriven = val
}
func (p *LocationStatus) SetPoiName(val string) {
	p.PoiName = val
}
func (p *LocationStatus) SetTimestampSec(val int64) {
	p.TimestampSec = val
}

var fieldIDToName_LocationStatus = map[int16]string{
	1: "location",
	2: "fee_cent",
	3: "km_driven",
	4: "poi_name",
	5: "timestamp_sec",
}

func (p *LocationStatus) IsSetLocation() bool {
	return p.Location != nil
}

func (p *LocationStatus) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LocationStatus[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LocationStatus) ReadField1(iprot thrift.TProtocol) error {
	p.Location = NewLocation()
	if err := p.Location.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LocationStatus) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.FeeCent = v
	}
	return nil
}

func (p *LocationStatus) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		p.KmDriven = v
	}
	return nil
}

func (p *LocationStatus) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PoiName = v
	}
	return nil
}

func (p *LocationStatus) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.TimestampSec = v
	}
	return nil
}

func (p *LocationStatus) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("LocationStatus"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LocationStatus) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("location", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Location.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LocationStatus) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("fee_cent", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.FeeCent); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *LocationStatus) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("km_driven", thrift.DOUBLE, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.KmDriven); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *LocationStatus) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("poi_name", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PoiName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *LocationStatus) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("timestamp_sec", thrift.I64, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TimestampSec); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *LocationStatus) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LocationStatus(%+v)", *p)
}

func (p *LocationStatus) DeepEqual(ano *LocationStatus) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Location) {
		return false
	}
	if !p.Field2DeepEqual(ano.FeeCent) {
		return false
	}
	if !p.Field3DeepEqual(ano.KmDriven) {
		return false
	}
	if !p.Field4DeepEqual(ano.PoiName) {
		return false
	}
	if !p.Field5DeepEqual(ano.TimestampSec) {
		return false
	}
	return true
}

func (p *LocationStatus) Field1DeepEqual(src *Location) bool {

	if !p.Location.DeepEqual(src) {
		return false
	}
	return true
}
func (p *LocationStatus) Field2DeepEqual(src int32) bool {

	if p.FeeCent != src {
		return false
	}
	return true
}
func (p *LocationStatus) Field3DeepEqual(src float64) bool {

	if p.KmDriven != src {
		return false
	}
	return true
}
func (p *LocationStatus) Field4DeepEqual(src string) bool {

	if strings.Compare(p.PoiName, src) != 0 {
		return false
	}
	return true
}
func (p *LocationStatus) Field5DeepEqual(src int64) bool {

	if p.TimestampSec != src {
		return false
	}
	return true
}

type TripEntity struct {
	Id   string `thrift:"id,1" frugal:"1,default,string" json:"id"`
	Trip *Trip  `thrift:"trip,2" frugal:"2,default,Trip" json:"trip"`
}

func NewTripEntity() *TripEntity {
	return &TripEntity{}
}

func (p *TripEntity) InitDefault() {
	*p = TripEntity{}
}

func (p *TripEntity) GetId() (v string) {
	return p.Id
}

var TripEntity_Trip_DEFAULT *Trip

func (p *TripEntity) GetTrip() (v *Trip) {
	if !p.IsSetTrip() {
		return TripEntity_Trip_DEFAULT
	}
	return p.Trip
}
func (p *TripEntity) SetId(val string) {
	p.Id = val
}
func (p *TripEntity) SetTrip(val *Trip) {
	p.Trip = val
}

var fieldIDToName_TripEntity = map[int16]string{
	1: "id",
	2: "trip",
}

func (p *TripEntity) IsSetTrip() bool {
	return p.Trip != nil
}

func (p *TripEntity) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TripEntity[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TripEntity) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *TripEntity) ReadField2(iprot thrift.TProtocol) error {
	p.Trip = NewTrip()
	if err := p.Trip.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *TripEntity) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TripEntity"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TripEntity) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TripEntity) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("trip", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Trip.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TripEntity) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TripEntity(%+v)", *p)
}

func (p *TripEntity) DeepEqual(ano *TripEntity) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Trip) {
		return false
	}
	return true
}

func (p *TripEntity) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Id, src) != 0 {
		return false
	}
	return true
}
func (p *TripEntity) Field2DeepEqual(src *Trip) bool {

	if !p.Trip.DeepEqual(src) {
		return false
	}
	return true
}

type Trip struct {
	AccountId  string          `thrift:"account_id,1" frugal:"1,default,string" json:"account_id"`
	CarId      string          `thrift:"car_id,2" frugal:"2,default,string" json:"car_id"`
	Start      *LocationStatus `thrift:"start,3" frugal:"3,default,LocationStatus" json:"start"`
	Current    *LocationStatus `thrift:"current,4" frugal:"4,default,LocationStatus" json:"current"`
	End        *LocationStatus `thrift:"end,5" frugal:"5,default,LocationStatus" json:"end"`
	Status     TripStatus      `thrift:"status,6" frugal:"6,default,TripStatus" json:"status"`
	IdentityId string          `thrift:"identity_id,7" frugal:"7,default,string" json:"identity_id"`
}

func NewTrip() *Trip {
	return &Trip{}
}

func (p *Trip) InitDefault() {
	*p = Trip{}
}

func (p *Trip) GetAccountId() (v string) {
	return p.AccountId
}

func (p *Trip) GetCarId() (v string) {
	return p.CarId
}

var Trip_Start_DEFAULT *LocationStatus

func (p *Trip) GetStart() (v *LocationStatus) {
	if !p.IsSetStart() {
		return Trip_Start_DEFAULT
	}
	return p.Start
}

var Trip_Current_DEFAULT *LocationStatus

func (p *Trip) GetCurrent() (v *LocationStatus) {
	if !p.IsSetCurrent() {
		return Trip_Current_DEFAULT
	}
	return p.Current
}

var Trip_End_DEFAULT *LocationStatus

func (p *Trip) GetEnd() (v *LocationStatus) {
	if !p.IsSetEnd() {
		return Trip_End_DEFAULT
	}
	return p.End
}

func (p *Trip) GetStatus() (v TripStatus) {
	return p.Status
}

func (p *Trip) GetIdentityId() (v string) {
	return p.IdentityId
}
func (p *Trip) SetAccountId(val string) {
	p.AccountId = val
}
func (p *Trip) SetCarId(val string) {
	p.CarId = val
}
func (p *Trip) SetStart(val *LocationStatus) {
	p.Start = val
}
func (p *Trip) SetCurrent(val *LocationStatus) {
	p.Current = val
}
func (p *Trip) SetEnd(val *LocationStatus) {
	p.End = val
}
func (p *Trip) SetStatus(val TripStatus) {
	p.Status = val
}
func (p *Trip) SetIdentityId(val string) {
	p.IdentityId = val
}

var fieldIDToName_Trip = map[int16]string{
	1: "account_id",
	2: "car_id",
	3: "start",
	4: "current",
	5: "end",
	6: "status",
	7: "identity_id",
}

func (p *Trip) IsSetStart() bool {
	return p.Start != nil
}

func (p *Trip) IsSetCurrent() bool {
	return p.Current != nil
}

func (p *Trip) IsSetEnd() bool {
	return p.End != nil
}

func (p *Trip) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Trip[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Trip) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.AccountId = v
	}
	return nil
}

func (p *Trip) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CarId = v
	}
	return nil
}

func (p *Trip) ReadField3(iprot thrift.TProtocol) error {
	p.Start = NewLocationStatus()
	if err := p.Start.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *Trip) ReadField4(iprot thrift.TProtocol) error {
	p.Current = NewLocationStatus()
	if err := p.Current.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *Trip) ReadField5(iprot thrift.TProtocol) error {
	p.End = NewLocationStatus()
	if err := p.End.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *Trip) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Status = TripStatus(v)
	}
	return nil
}

func (p *Trip) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.IdentityId = v
	}
	return nil
}

func (p *Trip) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Trip"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Trip) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("account_id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AccountId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Trip) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("car_id", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CarId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Trip) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("start", thrift.STRUCT, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Start.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Trip) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("current", thrift.STRUCT, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Current.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *Trip) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("end", thrift.STRUCT, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.End.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *Trip) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.I32, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *Trip) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("identity_id", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.IdentityId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *Trip) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Trip(%+v)", *p)
}

func (p *Trip) DeepEqual(ano *Trip) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AccountId) {
		return false
	}
	if !p.Field2DeepEqual(ano.CarId) {
		return false
	}
	if !p.Field3DeepEqual(ano.Start) {
		return false
	}
	if !p.Field4DeepEqual(ano.Current) {
		return false
	}
	if !p.Field5DeepEqual(ano.End) {
		return false
	}
	if !p.Field6DeepEqual(ano.Status) {
		return false
	}
	if !p.Field7DeepEqual(ano.IdentityId) {
		return false
	}
	return true
}

func (p *Trip) Field1DeepEqual(src string) bool {

	if strings.Compare(p.AccountId, src) != 0 {
		return false
	}
	return true
}
func (p *Trip) Field2DeepEqual(src string) bool {

	if strings.Compare(p.CarId, src) != 0 {
		return false
	}
	return true
}
func (p *Trip) Field3DeepEqual(src *LocationStatus) bool {

	if !p.Start.DeepEqual(src) {
		return false
	}
	return true
}
func (p *Trip) Field4DeepEqual(src *LocationStatus) bool {

	if !p.Current.DeepEqual(src) {
		return false
	}
	return true
}
func (p *Trip) Field5DeepEqual(src *LocationStatus) bool {

	if !p.End.DeepEqual(src) {
		return false
	}
	return true
}
func (p *Trip) Field6DeepEqual(src TripStatus) bool {

	if p.Status != src {
		return false
	}
	return true
}
func (p *Trip) Field7DeepEqual(src string) bool {

	if strings.Compare(p.IdentityId, src) != 0 {
		return false
	}
	return true
}
